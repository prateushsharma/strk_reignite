<!-- 
=======================================================================
COMPREHENSIVE .CSPROJ FILE DOCUMENTATION
=======================================================================
This file defines the project configuration for a .NET application.
It controls how the project is built, what dependencies it has,
and various other project settings.

SECTION 1: PROJECT FUNDAMENTALS
=======================================================================

<Project Sdk="Microsoft.NET.Sdk">
  The root element specifying this is a .NET SDK-style project.
  The SDK attribute determines which default targets and tasks are imported.
  Common SDK values:
  - Microsoft.NET.Sdk: Standard .NET projects
  - Microsoft.NET.Sdk.Web: ASP.NET Core projects
  - Microsoft.NET.Sdk.Worker: Worker Service projects
  - Microsoft.NET.Sdk.Razor: Razor Class Library projects

SECTION 2: BASIC PROJECT PROPERTIES
=======================================================================-->

  <PropertyGroup>
    <!-- Target framework - specifies which .NET version to build for -->
    <TargetFramework>net8.0</TargetFramework>
    
    <!-- 
    OutputType: Determines the kind of output produced
    Possible values:
    - Exe: Console application (default for most projects)
    - Library: Class library (DLL)
    - WinExe: Windows GUI application
    - Module: Netmodule (rarely used)
    -->
    <OutputType>Exe</OutputType>
    
    <!-- 
    ImplicitUsings: Enables implicit global using directives
    When enabled, common namespaces are automatically available
    without explicit using statements
    -->
    <ImplicitUsings>enable</ImplicitUsings>
    
    <!-- 
    Nullable: Enables nullable reference types feature
    Possible values:
    - enable: Full nullable context
    - disable: No nullable context (legacy behavior)
    - warnings: Show warnings but don't enforce
    - annotations: Only enable nullability annotations
    -->
    <Nullable>enable</Nullable>
    
    <!-- 
    TreatWarningsAsErrors: Makes all warnings show as errors
    Helps maintain high code quality standards
    -->
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    
    <!-- 
    AssemblyName: The name of the output assembly
    Defaults to project directory name if not specified
    -->
    <AssemblyName>LynqDefinitionValidator</AssemblyName>
    
    <!-- 
    RootNamespace: The base namespace for the project
    Defaults to AssemblyName if not specified
    -->
    <RootNamespace>LynqDefinitionValidator</RootNamespace>
    
    <!-- 
    GenerateDocumentationFile: Creates XML documentation file
    Requires proper XML doc comments in code
    -->
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    
    <!-- 
    Version: Sets assembly version (major.minor.patch.build)
    Follows Semantic Versioning (SemVer) principles
    -->
    <Version>1.0.0</Version>
    
    <!-- 
    Authors and Company: Metadata for assembly info
    Used in NuGet packages and assembly attributes
    -->
    <Authors>YourNameHere</Authors>
    <Company>YourCompanyHere</Company>
    
    <!-- 
    Copyright: Legal copyright notice
    Automatically included in assembly attributes
    -->
    <Copyright>Copyright Â© 2023 YourCompany</Copyright>
    
    <!-- 
    Package tags for NuGet packaging
    Only relevant if generating NuGet packages
    -->
    <PackageTags>validation tools agents</PackageTags>
    <PackageProjectUrl>https://github.com/yourrepo</PackageProjectUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
  </PropertyGroup>

<!-- 
SECTION 3: DEPENDENCIES AND REFERENCES
=======================================================================
This section manages NuGet package references and project references
-->

  <ItemGroup>
    <!-- 
    PackageReference: NuGet package dependencies
    Include: Package ID
    Version: Package version (can use version ranges)
    PrivateAssets: Controls dependency flow (all/runtime/contentfiles/build/none)
    -->
    <PackageReference Include="Microsoft.Extensions.Logging" Version="8.0.0" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    
    <!-- 
    ProjectReference: References to other projects in solution
    Can include additional metadata like ReferenceOutputAssembly
    -->
    <!-- <ProjectReference Include="..\SharedLib\SharedLib.csproj" /> -->
  </ItemGroup>

<!-- 
SECTION 4: BUILD CUSTOMIZATION
=======================================================================
Advanced build configuration and custom targets
-->

  <ItemGroup>
    <!-- 
    Compile: Source files to include in compilation
    Can use glob patterns (**/*.cs) or explicit includes
    Remove: Excludes specific files from compilation
    -->
    <Compile Include="**\*.cs" Exclude="**\*.generated.cs" />
    
    <!-- 
    EmbeddedResource: Files to embed in the assembly
    Often used for localization files, templates, etc.
    -->
    <!-- <EmbeddedResource Include="Resources\*.resx" /> -->
    
    <!-- 
    None: Files that should be included in project but not processed
    Often used for configuration files, scripts, etc.
    Can set CopyToOutputDirectory to preserve/publish
    -->
    <None Update="appsettings.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>

<!-- 
SECTION 5: CUSTOM PROPERTIES AND TARGETS
=======================================================================
Advanced build customization
-->

  <!-- 
  Custom properties for build configuration
  Can be conditional on configuration (Debug/Release)
  -->
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <Optimize>false</Optimize>
    <DebugType>full</DebugType>
    <DebugSymbols>true</DebugSymbols>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DefineConstants>RELEASE;TRACE</DefineConstants>
    <Optimize>true</Optimize>
    <DebugType>pdbonly</DebugType>
    <DebugSymbols>true</DebugSymbols>
  </PropertyGroup>

  <!-- 
  Custom build targets
  Can extend the build process with additional tasks
  -->
  <!--
  <Target Name="PostBuild" AfterTargets="PostBuildEvent">
    <Exec Command="echo Build completed at %TIME%" />
  </Target>
  -->

<!-- 
SECTION 6: ANALYZERS AND CODE QUALITY
=======================================================================
Static code analysis configuration
-->

  <ItemGroup>
    <!-- 
    PackageReference for analyzers
    These provide additional code analysis rules
    -->
    <PackageReference Include="StyleCop.Analyzers" Version="1.2.0-beta.435">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    
    <!-- 
    Additional analyzer configuration
    Can be done through editorconfig or here
    -->
    <AdditionalFiles Include=".editorconfig" />
  </ItemGroup>

<!-- 
END OF FILE NOTES:
=======================================================================
1. For complex projects, consider splitting configurations into:
   - Directory.Build.props (solution-wide settings)
   - Directory.Build.targets (solution-wide targets)
   
2. Always keep the .csproj file under source control

3. Use meaningful comments to explain non-obvious configurations

4. Regularly clean up unused references and imports

5. Consider using <Import> for shared property/target files
=======================================================================
-->
</Project>